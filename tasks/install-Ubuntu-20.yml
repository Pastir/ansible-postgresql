---
- name: add postgresql apt-key
  apt_key:
    url: 'https://www.postgresql.org/media/keys/ACCC4CF8.asc'
    state: present
  tags:
    - install

- name: 'add postgresql repository'
  apt_repository:
     repo: "deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main"
     state: present
  tags:
    - install

- name: installing required packages
  apt:
    name: "{{ postgresql_packages }}"
    state: present
  tags:
    - install

- name: Add new user
  community.postgresql.postgresql_user:
    name: "{{ item.name }}"
    password: "{{ item.passwd }}"
  become: yes
  become_user: postgres
  loop: "{{ postgresql_db_user }}"
  tags:
    - create_user

- name: Grant role
  community.postgresql.postgresql_membership:
    group: "{{ item.groups }}"
    target_roles: "{{ item.name }}"
    state: present
  become: yes
  become_user: postgres
  loop: "{{ postgresql_db_user }}"
  when: item.groups is defined
  tags:
    - create_user

#- name: Revoke role
#  community.postgresql.postgresql_membership:
#    groups: "{{ item.groups }}"
#    target_role: "{{ item.name }}"
#    fail_on_role: no
#    state: absent
#  loop: "{{  postgresql_db_user }}"
#  when: item.value.groups is defined
#  tags:
#    - revoke_user

- name: Create database
  community.postgresql.postgresql_db:
    owner: "{{ item.owner }}"
    name: "{{ item.name }}"
  become: yes
  become_user: postgres
  loop: "{{ postgresql_db }}"
  tags:
    - create_db

- name: GRANT ALL PRIVILEGES ON SCHEMA public TO dbname
  community.postgresql.postgresql_privs:
    db: "{{ item.dbname }}"
    privs: "{{ item.priv }}"
    type: schema
    role: "{{ item.role }}"
  become: yes
  become_user: postgres
  loop: "{{ postgresql_priv }}"
  tags:
    - create_grant